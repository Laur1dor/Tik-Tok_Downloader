import asyncio
import logging
import sys
import requests
import re
import os
import tempfile
import subprocess
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, Filter
from aiogram.types import Message, URLInputFile, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web
import database
from flask import Flask
from threading import Thread
from yt_dlp import YoutubeDL

# Flask
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is alive!"

def run_flask():
    app.run(host='0.0.0.0', port=55555)

flask_thread = Thread(target=run_flask)
flask_thread.start()

load_dotenv()
TOKEN = os.getenv("TOKEN")  
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
FFMPEG_PATH = "/usr/bin/ffmpeg"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

database.create_table_users()
database.create_table_convertations()

class LinkFilter(Filter):
    async def __call__(self, message: Message) -> bool:
        return message.text.startswith("http")

async def check_subscription(bot: Bot, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def sanitize_filename(name):
    return re.sub(r'[\\/*?:"<>|]', "", name)

def get_video_resolution(file_path):
    import time

    ffprobe_path = FFMPEG_PATH.replace("ffmpeg", "ffprobe")

    for _ in range(10):
        if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
            break
        time.sleep(0.5)
    else:
        raise FileNotFoundError(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π.")

    cmd = [
        ffprobe_path,
        "-v", "error",
        "-select_streams", "v:0",
        "-show_entries", "stream=width,height",
        "-of", "csv=s=x:p=0",
        file_path
    ]
    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    output = result.stdout.strip()

    if not output or "x" not in output:
        raise ValueError("ffprobe –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ.")

    width, height = map(int, output.split('x'))
    return width, height


def pad_video_if_needed(input_path):
    width, height = get_video_resolution(input_path)
    aspect_ratio = width / height
    logging.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {width}x{height}, –ê—Å–ø–µ–∫—Ç: {aspect_ratio:.2f}")

    if abs(aspect_ratio - (9/16)) < 0.03:
        logging.info("[FFMPEG] –í–∏–¥–µ–æ —É–∂–µ 9:16 ‚Äî –ø–∞–¥–¥–∏–Ω–≥ –∏ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return input_path

    if abs(aspect_ratio - (16/9)) < 0.01:
        logging.info("[FFMPEG] –í–∏–¥–µ–æ —É–∂–µ 16:9 ‚Äî –ø–∞–¥–¥–∏–Ω–≥ –Ω–µ –Ω—É–∂–µ–Ω.")
        return input_path

    output_path = input_path.replace(".mp4", "_padded.mp4")
    cmd = [
        FFMPEG_PATH, "-i", input_path,
        "-vf", "scale=-2:720:force_original_aspect_ratio=decrease,pad=ceil(iw/2)*2:720:(ow-iw)/2:(oh-ih)/2",
        "-c:a", "copy", output_path
    ]

    logging.info("[FFMPEG] –í–∏–¥–µ–æ –±—É–¥–µ—Ç –≤–ø–∏—Å–∞–Ω–æ –≤ 1280x720 —Å –±–æ–∫–æ–≤—ã–º–∏ –∏ –≤–µ—Ä—Ö/–Ω–∏–∑ –ø–æ–ª–æ—Å–∞–º–∏")
    try:
        subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=120, check=True)
        return output_path
    except subprocess.TimeoutExpired:
        logging.error("FFmpeg: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        return input_path
    except subprocess.CalledProcessError as e:
        logging.error(f"FFmpeg: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ‚Äî {e}")
        return input_path

async def download_tiktok(url):
    tmpdir = tempfile.mkdtemp()
    output_template = os.path.join(tmpdir, "%(title).50s.%(ext)s")

    ydl_opts = {
        'outtmpl': output_template,
        'format': 'mp4',
        'quiet': True,
        'no_warnings': True,
    }

    def _download():
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            path = ydl.prepare_filename(info)
            new_path = os.path.join(tmpdir, sanitize_filename(os.path.basename(path)))
            os.rename(path, new_path)
            return pad_video_if_needed(new_path)

    padded_path = await asyncio.to_thread(_download)
    return padded_path, tmpdir


    def _download():
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            path = ydl.prepare_filename(info)
            new_path = os.path.join(tempfile.gettempdir(), sanitize_filename(os.path.basename(path)))
            os.rename(path, new_path)
            return pad_video_if_needed(new_path)

    padded_path = await asyncio.to_thread(_download)
    return padded_path

@dp.message(LinkFilter())
async def Link_handler(message: Message) -> None:
    is_subscribed = await check_subscription(message.bot, message.from_user.id)

    if not is_subscribed:
        buttons = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—èüîó", url="https://t.me/your_channel_name")],
            [InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è‚úÖ", callback_data="check_sub")]
        ])
        await message.answer("–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!", reply_markup=buttons)
        return

    msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

    try:
        video_path, tmpdir = await download_tiktok(message.text)
        size_mb = os.path.getsize(video_path) / 1024 / 1024

        if size_mb > 50:
            await msg.edit_text(f"‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {size_mb:.1f} –ú–ë. –ú–∞–∫—Å–∏–º—É–º ‚Äî 50 –ú–ë.")
            return

        await msg.edit_text("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ...")
        file = FSInputFile(video_path)
        await message.answer_video(
            file,
            caption="–°–∫–∞—á–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é:\n\n[@TikTokDownloader_yourbot](https://t.me/TikTokDownloader_yourbot)",
            parse_mode=ParseMode.MARKDOWN
        )
        database.add_convertation(message.from_user.id, status='Done')

    except Exception as e:
        await msg.edit_text(f"–û—à–∏–±–∫–∞: {e}")
        database.add_convertation(message.from_user.id, status='Failed')

    finally:
        import shutil
        if 'tmpdir' in locals() and os.path.exists(tmpdir):
            shutil.rmtree(tmpdir)

@dp.callback_query(F.data == "check_sub")
async def check_sub_callback(callback: CallbackQuery):
    if await check_subscription(callback.bot, callback.from_user.id):
        await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!‚úÖ\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –µ—â—ë —Ä–∞–∑.")
    else:
        await callback.answer("–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}!\n\n–≠—Ç–æ –∑–∞–≥—Ä—É–∑—á–∏–∫ –≤–∏–¥–µ–æ –∏–∑ TikTok –±–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤.\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
    database.add_user(message.from_user.id, message.from_user.username)

@dp.message(Command("restart"))
async def command_restart_handler(message: Message) -> None:
    await message.delete()
    await message.answer("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!üîÑ\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ TikTok.")
    database.add_user(message.from_user.id, message.from_user.username)

@dp.message(Command('admin'))
async def admin_stats(message: Message) -> None:
    users = database.get_users()
    convertations = database.get_convertations()
    with open('info.txt', 'w') as file:
        file.write(f'USERS\n{users}\nCONVERTATIONS\n{convertations}')
    await message.answer_document(document=FSInputFile('info.txt'))

@dp.message()
async def echo_handler(message: Message) -> None:
    await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ TikTok.")

async def main() -> None:
    await bot.set_my_commands([
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="restart", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    ])
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
